const express = require("express");
const router = express.Router();
const Phone = require("../models/Phones.js");

// üîç T√¨m ki·∫øm ƒëi·ªán tho·∫°i n√¢ng cao
router.get("/search", async (req, res) => {
  try {
    const { q, batteryMin, batteryMax, sim, storage } = req.query;
    let query = {};

    // T√¨m theo t√™n ho·∫∑c m√¥ t·∫£
    if (q) {
      query.$or = [
        { name: { $regex: q, $options: "i" } },
        { description: { $regex: q, $options: "i" } },
      ];
    }

    // T√¨m theo dung l∆∞·ª£ng pin
    if (batteryMin || batteryMax) {
      query.battery = {};
      if (batteryMin) query.battery.$gte = Number(batteryMin);
      if (batteryMax) query.battery.$lte = Number(batteryMax);
    }

    // T√¨m theo SIM
    if (sim) query.sim = sim;

    // T√¨m theo b·ªô nh·ªõ trong
    if (storage) {
      query["storages.size"] = { $in: Array.isArray(storage) ? storage : [storage] };
    }

    const phones = await Phone.find(query);
    res.json(phones);
  } catch (err) {
    console.error("‚ùå L·ªói t√¨m ki·∫øm:", err);
    res.status(500).json({ error: "L·ªói server khi t√¨m ki·∫øm" });
  }
});

// üì± L·∫•y danh s√°ch t·∫•t c·∫£ ƒëi·ªán tho·∫°i
router.get("/", async (req, res) => {
  try {
    const phones = await Phone.find().populate("specs"); // ‚úÖ Quan tr·ªçng: populate specs lu√¥n
    res.json(phones);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîé L·∫•y ƒëi·ªán tho·∫°i theo t√™n (n·∫øu c·∫ßn d√πng ƒë∆∞·ªùng d·∫´n /name/:name)
router.get("/name/:name", async (req, res) => {
  try {
    const phone = await Phone.findOne({ name: req.params.name }).populate("specs");
    if (!phone) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json(phone);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

router.get("/:id", async (req, res) => {
  try {
    const phone = await Phone.findById(req.params.id).populate("specs");
    if (!phone) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json(phone);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚ûï Th√™m m·ªõi m·ªôt ƒëi·ªán tho·∫°i
router.post("/", async (req, res) => {
  try {
    const newPhone = new Phone(req.body);
    const savedPhone = await newPhone.save();
    res.json(savedPhone);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// üìù C·∫≠p nh·∫≠t s·∫£n ph·∫©m
router.put("/:id", async (req, res) => {
  try {
    const updatedPhone = await Phone.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updatedPhone);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// üóëÔ∏è X√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    await Phone.findByIdAndDelete(req.params.id);
    res.json({ message: "ƒê√£ x√≥a s·∫£n ph·∫©m" });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});


module.exports = router;
