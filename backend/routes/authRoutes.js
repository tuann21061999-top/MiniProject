const express = require("express");
const bcrypt = require("bcrypt");
const User = require("../models/User.js");

const router = express.Router();

/* ====================== üß© ƒêƒÇNG K√ù ====================== */
router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    if (!name || !email || !password)
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin" });

    const existing = await User.findOne({ email });
    if (existing)
      return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i" });

    const hashed = await bcrypt.hash(password, 10);
    const newUser = await User.create({
      name,
      email,
      password: hashed,
    });

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
      user: { id: newUser._id, email: newUser.email, name: newUser.name, role: newUser.role },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);
    res.status(500).json({ error: err.message });
  }
});

/* ====================== üîë ƒêƒÇNG NH·∫¨P ====================== */
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password)
      return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });

    const user = await User.findOne({ email });
    if (!user)
      return res.status(401).json({ error: "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(401).json({ error: "Sai m·∫≠t kh·∫©u" });

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      user: { id: user._id, email: user.email, name: user.name, role: user.role, phone: user.phone || "" },
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ error: err.message });
  }
});

/* ====================== üì± C·∫¨P NH·∫¨T / LI√äN K·∫æT S·ªê ƒêI·ªÜN THO·∫†I ====================== */
router.put("/update-phone", async (req, res) => {
  try {
    const { email, phone } = req.body;
    if (!email || !phone)
      return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i" });

    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    // ‚úÖ C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i
    user.phone = phone;
    await user.save();

    res.json({
      message: user.phone
        ? "‚úÖ C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng!"
        : "‚úÖ Li√™n k·∫øt s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng!",
      user: { id: user._id, name: user.name, email: user.email, phone: user.phone, role: user.role },
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t SƒêT:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i" });
  }
});

/* ====================== üîê C·∫¨P NH·∫¨T M·∫¨T KH·∫®U ====================== */
router.put("/update-password", async (req, res) => {
  try {
    const { email, oldPassword, newPassword } = req.body;
    if (!email || !oldPassword || !newPassword)
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin" });

    const user = await User.findOne({ email });
    if (!user)
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch)
      return res.status(400).json({ error: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    await user.save();

    res.json({ message: "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
    res.status(500).json({ error: "L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u" });
  }
});

module.exports = router;
